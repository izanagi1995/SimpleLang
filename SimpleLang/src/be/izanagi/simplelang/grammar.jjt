options {
/** create a pure parser */
STATIC=false;
MULTI=true;
UNICODE_INPUT=true;
LOOKAHEAD = 2;
}
PARSER_BEGIN(Parser)
package be.izanagi.simplelang;

import java.io.FileInputStream;
import be.izanagi.simplelang.interpretation.Interpreter;

public class Parser{
	
	public static void main(String args[])
	{
		try
		{
		//java.io.StringReader r= new java.io.StringReader(args[0]);
		Parser app= new Parser(System.in);
		ASTStart x=ASTStart.class.cast(app.Start());
		new Interpreter().interpret(x);		}catch(Exception err){
			err.printStackTrace();
		}
		
	}
}

PARSER_END(Parser)

SKIP : { " " | "\t" | "\n" | "\r" }
TOKEN:
{  < ENDLINE : (",") >
| < TYPE    : ("int"|"string") >
| < ASSIGNSIGN : ("=") >
| < INT     : (["0"-"9"])+ >
| < WORD    : (["a"-"z"]|["A"-"Z"]|< INT >)+ >
| < STRING  : ("\"" < WORD >((" ")+< WORD >)* "\"") >
}
ASTStart Start () #Start:{}
{
  ((Assignation()|FuncCall()) < ENDLINE >)*< ENDLINE >
  {    return jjtThis;
  }
}
void Assignation() #Assignation:{}{  Type() FuncVarName() < ASSIGNSIGN > Content()
}
void FuncCall():{}{  FuncVarName()"("Args()")"
}
void FuncVarName():
{
  Token t;
}{  ( t=< WORD > )
  {
    jjtThis.value = t.image;
  }
}
void Args():{}{  (Content()(","Content())*)*
}
void Type():{  Token t;}{  ( t=< TYPE > )
  {    jjtThis.value = t.image;
  }
}
void Content():{  Token t;
  int val;
}
{
  ( t=< WORD >)
  {
    jjtThis.value = t.image;
  }
  |   ( t=< STRING > )  {    jjtThis.value = t.image;
  }
  | 
  (val = MathExpr())  {    jjtThis.value = val;
  }
}
int MathExpr():{   int value;
}{   value = somme()
   {return value;} 
}

int somme() :{  int x;
  int y;
}
{
  x=prod()
  (
    "+" y=somme()	{ x += y; }
    |
    "-" y=somme()	{ x -= y; } 
  )*
  { return x; }
}
int prod() :{  int x;
  int y;
}
{
  x=valeur()
  (
    "*" y=prod()	{ x *= y; }
    |
    "/" y=prod()	{ x /= y; }
  )*
  { return x; }}
int valeur() :{  int value;
}
{    "-" value=number()	{ return -value; }
    |
    value=number()		{ return value; }
}
int sqrt(){  int value;
}
int number() :{  Token t;
  int value;
}
{  t=< INT >				{return Integer.parseInt(t.image);}
  |
  "(" value=somme() ")" 	{return value;}
}           
     
