/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. grammar.jj */
/*@egen*/options {
/** create a pure parser */
STATIC=false;
           
}
PARSER_BEGIN(Parser)
package be.izanagi.simplelang;

import java.io.FileInputStream;
import be.izanagi.simplelang.interpretation.Interpreter;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTParserState jjtree = new JJTParserState();

/*@egen*/
	
	public static void main(String args[])
	{
		try
		{
		//java.io.StringReader r= new java.io.StringReader(args[0]);
		Parser app= new Parser(System.in);
		ASTStart x=ASTStart.class.cast(app.Start());
		new Interpreter().interpret(x);		}catch(Exception err){
			err.printStackTrace();
		}
		
	}
}

PARSER_END(Parser)

SKIP : { " " | "\t" | "\n" | "\r" }
TOKEN:
{  < ENDLINE : (",") >
| < TYPE    : ("int"|"string") >
| < VNAME   : ((["a"-"z"]|["A"-"Z"])+) >
| < ASSIGNSIGN  : ("=") >
| < STRING  : ((["a"-"z"]|["A"-"Z"]|["0"-"9"])+) >
| < INT     : (["0"-"9"])+ >
}
ASTStart Start ()       :{/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  (Assignation() < ENDLINE >)*< ENDLINE >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void Assignation()             :{/*@bgen(jjtree) Assignation */
  ASTAssignation jjtn000 = new ASTAssignation(JJTASSIGNATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Assignation */
  try {
/*@egen*/
  Type() VariableName() < ASSIGNSIGN > Content()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void Content()         :{/*@bgen(jjtree) Content */
        ASTContent jjtn000 = new ASTContent(JJTCONTENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token name;
}
{/*@bgen(jjtree) Content */
  try {
/*@egen*/  ( name=< INT > )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
	jjtn000.value= Integer.parseInt(name.image);
	}
| ( name=< STRING >)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
	jjtn000.value= name.image;
	}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}
void VariableName()              :{/*@bgen(jjtree) VariableName */
  ASTVariableName jjtn000 = new ASTVariableName(JJTVARIABLENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) VariableName */
  try {
/*@egen*/
  ( t = < VNAME >)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
  	{
    jjtn000.value= t.image;
  	}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void Type()      :{/*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Type */
  try {
/*@egen*/  ( t = < TYPE > )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
  	{    jjtn000.value= t.image;
  	}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
 }  
  
     
